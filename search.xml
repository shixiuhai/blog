<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>防火墙连接云端详细配置</title>
      <link href="/2021/101910496.html"/>
      <url>/2021/101910496.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4a3c3ee396437a32dd76b5d55ff047314aef20c68d02217c7a410707af57b6d0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为防火墙连接云端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为USG防火墙二层部署</title>
      <link href="/2021/10194219.html"/>
      <url>/2021/10194219.html</url>
      
        <content type="html"><![CDATA[<h1 id="华为USG600V防火墙二层部署"><a href="#华为USG600V防火墙二层部署" class="headerlink" title="华为USG600V防火墙二层部署"></a><code>华为USG600V防火墙二层部署</code></h1><h2 id="1-整体拓扑及简介"><a href="#1-整体拓扑及简介" class="headerlink" title="1. 整体拓扑及简介"></a><code>1. 整体拓扑及简介</code></h2><p><a href="https://shixiuhai.github.io/work_share/USG6000V2.zip"  target="_blank"  style="color: #8ebf42"> 点击这里下载华为USG6000V防火墙二层部署ensp项目</a></p><blockquote><p>(1) 此拓扑是USG6000V的一个简单的二层部署，本项目的目标是实现vlan间的相互通信，所有pc都可以成功上网，上网的标志是所有的pc都能ping通114.114.114.114 这个地址。</p><p>(2) pc1和pc2属于vlan10，pc3和和pc4属于vlan20，pc5和pc6属于vlan30。sw1、sw2、sw3、sw0属于二层交换机，在上面划分了vlan相关，FW1是USG6000V防火墙这里做了二层的部署，cloud2在这里可以理解为三层的接入层（连接internat的路由器）。cloud1使用了防火墙GE0/0/0接口做为管理接口，实现PC登录防火墙的web页面进行防火墙的配置。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/usg%E4%BA%8C%E5%B1%82%E9%83%A8%E7%BD%B2%E6%8B%93%E6%89%91.PNG" alt="二层部署拓扑"></p><h2 id="2-pc具体配置"><a href="#2-pc具体配置" class="headerlink" title="2. pc具体配置"></a><code>2. pc具体配置</code></h2><p>(1) pc1和pc2的配置</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/pc1%E5%92%8Cpc2%E9%85%8D%E7%BD%AE.PNG" alt="pc1-pc2"></p><p>（2）pc3和pc4配置</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/pc3%E5%92%8Cpc4%E7%9A%84%E9%85%8D%E7%BD%AE.PNG" alt="pc3-pc4"></p><p>(3) pc5和pc6配置</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/pc5%E5%92%8Cpc6%E9%85%8D%E7%BD%AE.PNG" alt="pc5-pc6"></p><h2 id="3-交换机具体配置"><a href="#3-交换机具体配置" class="headerlink" title="3. 交换机具体配置"></a><code>3. 交换机具体配置</code></h2><blockquote><p>这里描述了交换机的配置</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## sw1的配置</span><span class="token comment" spellcheck="true"># 端口组的方式配置</span><span class="token comment" spellcheck="true"># 创建vlan10 20 30</span>vlan batch 10 20 30<span class="token comment" spellcheck="true"># 创建端口组并命名为vlan10</span>port-group vlan10<span class="token comment" spellcheck="true"># 将e0/0/2 到 e0/0/3划入到端口组中</span>group-member e0/0/2 to e0/0/3<span class="token comment" spellcheck="true"># 设置端口类型trunk 或者 access</span>port link-type access<span class="token comment" spellcheck="true"># 设置端口属于vlan</span>port default vlan 10<span class="token comment" spellcheck="true">## sw2的配置</span><span class="token comment" spellcheck="true"># 端口组的方式配置</span><span class="token comment" spellcheck="true"># 创建vlan10 20 30</span>vlan batch 10 20 30<span class="token comment" spellcheck="true"># 创建端口组并命名为vlan10</span>port-group vlan10<span class="token comment" spellcheck="true"># 将e0/0/2 到 e0/0/3划入到端口组中</span>group-member e0/0/2 to e0/0/3<span class="token comment" spellcheck="true"># 设置端口类型trunk 或者 access</span>port link-type access<span class="token comment" spellcheck="true"># 设置端口属于vlan</span>port default vlan 10<span class="token comment" spellcheck="true">## sw3的配置</span><span class="token comment" spellcheck="true"># 端口组的方式配置</span><span class="token comment" spellcheck="true"># 创建vlan10 20 30</span>vlan batch 10 20 30<span class="token comment" spellcheck="true"># 创建端口组并命名为vlan30</span>port-group vlan30<span class="token comment" spellcheck="true"># 将e0/0/2 到 e0/0/3划入到端口组中</span>group-member e0/0/2 to e0/0/3<span class="token comment" spellcheck="true"># 设置端口类型trunk 或者 access</span>port link-type access<span class="token comment" spellcheck="true"># 设置端口属于vlan</span>port default vlan 30<span class="token comment" spellcheck="true">## sw0的配置</span><span class="token comment" spellcheck="true"># 端口组的方式配置</span><span class="token comment" spellcheck="true"># 创建vlan 10 20 30</span>vlan batch 10 20 30<span class="token comment" spellcheck="true"># 创建端口组命名为vlanall</span>port-group vlanall<span class="token comment" spellcheck="true"># 将g0/0/1到g0/0/4划入到端口组中</span>group-member GigabitEthernet0/0/1 to g0/0/4<span class="token comment" spellcheck="true"># 设置端口类型trunk 或者 access</span>port link-type trunk<span class="token comment" spellcheck="true"># 设置trunk允许通过的端口</span>port trunk allow-pass vlan 10 20</code></pre><h2 id="4-cloud1的具体配置"><a href="#4-cloud1的具体配置" class="headerlink" title="4. cloud1的具体配置"></a><code>4. cloud1的具体配置</code></h2><blockquote><p>这里需要先介绍一下cloud1的配置，因为后期需要通过本机的web页面登录防火墙实现对防火墙的配置。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/cloud1%E7%9A%84%E9%85%8D%E7%BD%AE.PNG" alt="cloud1"></p><p>这里不同电脑vmnet1的ip地址可能不同，比如我这里的ip是192.168.157.1那么我的防火墙G0/0/0地址就必须配置一个和192.168.157.1 同一个网段的地址。这里我防火墙ip地址配置的是192.168.157.5/24，具体ip配置可以进入ensp项目中通过终端查看防火墙的ip配置。这里防火墙G0/0/0接口里我配置了多个地址，但是只有192.168.157.5是有效的。所以由于不同电脑的vmnet的地址段不一样，你需要根据自己电脑的地址端在自己的防火墙上进行修改，或者你可以直接将vmnet1修改成和我一样的地址段。</p><h2 id="5-cloud2的具体配置"><a href="#5-cloud2的具体配置" class="headerlink" title="5. cloud2的具体配置"></a><code>5. cloud2的具体配置</code></h2><blockquote><p>这里cloud2的配置有点复杂，这里我们为了实现pc可以上外网，即可以ping通114.114.114.114，我们需要为cloud2绑定的vmnet8再绑定一下本机可以上网的网卡。</p></blockquote><p>(1) 创建cloud2绑定网卡</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/cloud%E9%85%8D%E7%BD%AE1.PNG" alt="cloud2"></p><p>这里的vmnet8这个192.168.1.1 ip无需过多关注，因为cloud2的网关是我们通过绑定到本机可上网的网卡获取的。这里的地址现在绑定过上网网卡后还没有改变过来，所以这个192.168.1.1部署cloud2的实际地址，查看实现地址的方法如下，或者关闭ensp项目重新打开这里的vmnet8就可以获取真正的cloud2的地址了。</p><p>(2）绑定本机可上网网卡并获取cloud2的实际可使用网卡地址</p><blockquote><p>点击更改适配器</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E5%99%A81.png"></p><blockquote><p>打开WLAN适配器</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/WLAN%E9%80%82%E9%85%8D%E5%99%A8.png"></p><blockquote><p>选择属性</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E5%B1%9E%E6%80%A7.png"></p><blockquote><p>设置共享</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E5%85%B1%E4%BA%AB.png"></p><blockquote><p>通过VMnet8查看cloud2实际ip地址</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E9%80%82%E9%85%8D%E5%99%A82.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF.png"></p><blockquote><p>查看详细信息</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E7%9B%B8%E4%BF%A1%E4%BF%A1%E6%81%AF2.png"></p><p>这里的192.168.137.1可以认为是我们得到cloud2的真正的ip地址，用来做防火墙的网关，所以防火墙的上连接口需要配置一个和这个地址同一个网段ip地址，在我的项目中我配置了192.168.137.6/24这个地址。</p><h2 id="6-USG6000V的具体配置"><a href="#6-USG6000V的具体配置" class="headerlink" title="6. USG6000V的具体配置"></a><code>6. USG6000V的具体配置</code></h2><blockquote><p>这里我同样只是对防火墙上网进行了基本配置，但是这里是二层部署的配置，二层部署一般可以选择接口对模式或者交换模式。这里有一点需要重点强调！！！ 防火墙做二层部署一定需要记得创建vlan，不管接口对模式还是交换模式一定记得创建vlan。</p></blockquote><p>(1) 使用web界面登录到防火墙</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/web%E7%99%BB%E5%BD%95.PNG" alt="usgweb"></p><p>(2) 创建vlan 10 20 30</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E9%98%B2%E7%81%AB%E5%A2%99%E5%88%9B%E5%BB%BAvlan.png" alt="创建vlan"></p><p>这里GE0/0/0做为连接cloud1的接口使用，GE1/0/0用于连接交换机sw0，GE1/0/1做为防火墙的出口。</p><p>(3) 配置接口对</p><blockquote><p>接口位置选择 安全区域 连接类型 允许的vlan 接口模式</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E6%8E%A5%E5%8F%A3%E5%AF%B91.png" alt="接口对配置"></p><blockquote><p>接口对位置进行一下配置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E6%8E%A5%E5%8F%A3%E5%AF%B92.png" alt="接口对配置"></p><p>(4) 配置安全策略</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A51.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A52.png" alt="安全策略"></p><p>这里只是对默认的default策略开启了全部允许，快速实现trust到untrst的策略设置，实际配置中会建立多条安全策略。</p><h2 id="7-路由器AR2配置"><a href="#7-路由器AR2配置" class="headerlink" title="7. 路由器AR2配置"></a><code>7. 路由器AR2配置</code></h2><blockquote><p>这里路由器需要配置静态缺省路由和nat，其中缺省路由是为了实现下面多个vlan的pc可以上网，缺省路由实现AR2可以访问外网，当AR2可以访问外网后下面所有vlan下pc即可通过AR2实现访问外网。</p></blockquote><p>配置NAT和静态路由</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 这里nat配置Easy ip的方式，即多对一的方式</span><span class="token comment" spellcheck="true"># 创建acl 2000</span>acl 2000rule permit <span class="token function">source</span> 10.0.0.0 0.0.0.255rule permit <span class="token function">source</span> 172.1.1.0 0.0.0.255rule permit <span class="token function">source</span> 192.168.0.0 0.0.0.255<span class="token comment" spellcheck="true"># 设置NAT地址池的转换策略</span>int e0/0/8nat outbound 2000 <span class="token comment" spellcheck="true">## 配置缺省路由</span><span class="token comment" spellcheck="true"># 这里我们配置的是一条缺省路由实现出去，192.168.137.1就是我们前面获取cloud2的真正的地址，来做为防火墙的下一跳，出接口是GE1/0/1接口</span>ip route-static 0.0.0.0 0.0.0.0 192.168.137.1 </code></pre><h2 id="8-验证是否实现上网"><a href="#8-验证是否实现上网" class="headerlink" title="8. 验证是否实现上网"></a><code>8. 验证是否实现上网</code></h2><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91%E9%AA%8C%E8%AF%81.PNG"></p><p>这里选择vlan10的pc1和vlan30的pc5进行了一个验证，得pc上外网成功，至此这个项目操作结束。</p><h2 id="9-项目总结"><a href="#9-项目总结" class="headerlink" title="9. 项目总结"></a><code>9. 项目总结</code></h2><p>（1）本项目复习了华为交换机vlan的划分创建</p><p>（2）本项目验证了防火墙二层部署的简单情况</p><p>（3）本项目的难点在于cloud2配置绑定WLAN网卡，和防火墙需要配置一条缺省路由</p><p>（4）本项目的防火墙web配置也可以通过命令配置</p><p>（5）本项目对路由器进行了简单的nat配置和静态缺省路由配置</p><p>（6）本项目需要强调一下防火墙在做二层部署的时候一定要创建需要的vlan</p><h2 id="10-小贴士常用查询某个配置的命令"><a href="#10-小贴士常用查询某个配置的命令" class="headerlink" title="10. 小贴士常用查询某个配置的命令"></a><code>10. 小贴士常用查询某个配置的命令</code></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 进如命令模式进行命令配置</span>system-view <span class="token comment" spellcheck="true"># 配置命令的第一步</span><span class="token comment" spellcheck="true">## 查询当前的配置</span>display this<span class="token comment" spellcheck="true">## 查询创建了哪些vlan</span>display vlan<span class="token comment" spellcheck="true">## 设备状态信息刷屏</span>Tab<span class="token comment" spellcheck="true">## 查询接口配置ip状态</span>display ip interface brief<span class="token comment" spellcheck="true">## 查询接口状态</span>display interface brief<span class="token comment" spellcheck="true">## 清晰查看端口属于哪个vlan</span>display port vlan<span class="token comment" spellcheck="true">## 查看路由表</span>display ip routing-table<span class="token comment" spellcheck="true">## 查看接口有哪些配置</span>int 接口名display this</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> USG6000V二层部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为USG防火墙三层部署</title>
      <link href="/2021/101947200.html"/>
      <url>/2021/101947200.html</url>
      
        <content type="html"><![CDATA[<h1 id="华为USG600V防火墙三层部署"><a href="#华为USG600V防火墙三层部署" class="headerlink" title="华为USG600V防火墙三层部署"></a><code>华为USG600V防火墙三层部署</code></h1><h2 id="1-整体拓扑及简介"><a href="#1-整体拓扑及简介" class="headerlink" title="1. 整体拓扑及简介"></a><code>1. 整体拓扑及简介</code></h2><p><a href="https://shixiuhai.github.io/work_share/USG6000V.zip"  target="_blank"  style="color: #8ebf42"> 点击这里下载华为USG6000V防火墙三层部署ensp项目</a></p><blockquote><p>(1) 此拓扑是USG600V一个简单的三层部署，本项目实现的目标是不同vlan之间可以相互通信，所有的pc都可以上网，上网的标志是所有的pc都可以ping通114.114.114.114这个地址。</p><p>(2) pc1和pc2属于vlan10，pc3和和pc4属于vlan20，pc5和pc6属于vlan30。sw1、sw2、sw3、sw0属于二层交换机，在上面划分了vlan相关，FW1是USG6000V防火墙这里做了三层的部署，cloud2在这里可以理解为三层的接入层（连接internat的路由器）。cloud1使用了防火墙GE0/0/0接口做为管理接口，实现PC登录防火墙的web页面进行防火墙的配置。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%89%E5%B1%82%E9%83%A8%E7%BD%B2%E7%AE%80%E5%8D%95%E6%8B%93%E6%89%911.PNG"></p><h2 id="2-pc具体配置"><a href="#2-pc具体配置" class="headerlink" title="2. pc具体配置"></a><code>2. pc具体配置</code></h2><p>(1) pc1和pc2的配置</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/pc1%E5%92%8Cpc2%E9%85%8D%E7%BD%AE.PNG" alt="pc1-pc2"></p><p>（2）pc3和pc4配置</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/pc3%E5%92%8Cpc4%E7%9A%84%E9%85%8D%E7%BD%AE.PNG" alt="pc3-pc4"></p><p>(3) pc5和pc6配置</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/pc5%E5%92%8Cpc6%E9%85%8D%E7%BD%AE.PNG" alt="pc5-pc6"></p><h2 id="3-交换机具体配置"><a href="#3-交换机具体配置" class="headerlink" title="3. 交换机具体配置"></a><code>3. 交换机具体配置</code></h2><blockquote><p>这里描述了交换机的配置</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## sw1的配置</span><span class="token comment" spellcheck="true"># 端口组的方式配置</span><span class="token comment" spellcheck="true"># 创建vlan10 20 30</span>vlan batch 10 20 30<span class="token comment" spellcheck="true"># 创建端口组并命名为vlan10</span>port-group vlan10<span class="token comment" spellcheck="true"># 将e0/0/2 到 e0/0/3划入到端口组中</span>group-member e0/0/2 to e0/0/3<span class="token comment" spellcheck="true"># 设置端口类型trunk 或者 access</span>port link-type access<span class="token comment" spellcheck="true"># 设置端口属于vlan</span>port default vlan 10<span class="token comment" spellcheck="true">## sw2的配置</span><span class="token comment" spellcheck="true"># 端口组的方式配置</span><span class="token comment" spellcheck="true"># 创建vlan10 20 30</span>vlan batch 10 20 30<span class="token comment" spellcheck="true"># 创建端口组并命名为vlan10</span>port-group vlan10<span class="token comment" spellcheck="true"># 将e0/0/2 到 e0/0/3划入到端口组中</span>group-member e0/0/2 to e0/0/3<span class="token comment" spellcheck="true"># 设置端口类型trunk 或者 access</span>port link-type access<span class="token comment" spellcheck="true"># 设置端口属于vlan</span>port default vlan 10<span class="token comment" spellcheck="true">## sw3的配置</span><span class="token comment" spellcheck="true"># 端口组的方式配置</span><span class="token comment" spellcheck="true"># 创建vlan10 20 30</span>vlan batch 10 20 30<span class="token comment" spellcheck="true"># 创建端口组并命名为vlan30</span>port-group vlan30<span class="token comment" spellcheck="true"># 将e0/0/2 到 e0/0/3划入到端口组中</span>group-member e0/0/2 to e0/0/3<span class="token comment" spellcheck="true"># 设置端口类型trunk 或者 access</span>port link-type access<span class="token comment" spellcheck="true"># 设置端口属于vlan</span>port default vlan 30<span class="token comment" spellcheck="true">## sw0的配置</span><span class="token comment" spellcheck="true"># 端口组的方式配置</span><span class="token comment" spellcheck="true"># 创建vlan 10 20 30</span>vlan batch 10 20 30<span class="token comment" spellcheck="true"># 创建端口组命名为vlanall</span>port-group vlanall<span class="token comment" spellcheck="true"># 将g0/0/1到g0/0/4划入到端口组中</span>group-member GigabitEthernet0/0/1 to g0/0/4<span class="token comment" spellcheck="true"># 设置端口类型trunk 或者 access</span>port link-type trunk<span class="token comment" spellcheck="true"># 设置trunk允许通过的端口</span>port trunk allow-pass vlan 10 20</code></pre><h2 id="4-cloud1的具体配置"><a href="#4-cloud1的具体配置" class="headerlink" title="4. cloud1的具体配置"></a><code>4. cloud1的具体配置</code></h2><blockquote><p>这里需要先介绍一下cloud1的配置，因为后期需要通过本机的web页面登录防火墙实现对防火墙的配置。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/cloud1%E7%9A%84%E9%85%8D%E7%BD%AE.PNG" alt="cloud1"></p><p>这里不同电脑vmnet1的ip地址可能不同，比如我这里的ip是192.168.157.1那么我的防火墙G0/0/0地址就必须配置一个和192.168.157.1 同一个网段的地址。这里我防火墙ip地址配置的是192.168.157.5/24，具体ip配置可以进入ensp项目中通过终端查看防火墙的ip配置。这里防火墙G0/0/0接口里我配置了多个地址，但是只有192.168.157.5是有效的。所以由于不同电脑的vmnet的地址段不一样，你需要根据自己电脑的地址端在自己的防火墙上进行修改，或者你可以直接将vmnet1修改成和我一样的地址段。</p><h2 id="5-cloud2的具体配置"><a href="#5-cloud2的具体配置" class="headerlink" title="5. cloud2的具体配置"></a><code>5. cloud2的具体配置</code></h2><blockquote><p>这里cloud2的配置有点复杂，这里我们为了实现pc可以上外网，即可以ping通114.114.114.114，我们需要为cloud2绑定的vmnet8再绑定一下本机可以上网的网卡。</p></blockquote><p>(1) 创建cloud2绑定网卡</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/cloud%E9%85%8D%E7%BD%AE1.PNG" alt="cloud2"></p><p>这里的vmnet8这个192.168.1.1 ip无需过多关注，因为cloud2的网关是我们通过绑定到本机可上网的网卡获取的。这里的地址现在绑定过上网网卡后还没有改变过来，所以这个192.168.1.1部署cloud2的实际地址，查看实现地址的方法如下，或者关闭ensp项目重新打开这里的vmnet8就可以获取真正的cloud2的地址了。</p><p>(2）绑定本机可上网网卡并获取cloud2的实际可使用网卡地址</p><blockquote><p>点击更改适配器</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E5%99%A81.png"></p><blockquote><p>打开WLAN适配器</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/WLAN%E9%80%82%E9%85%8D%E5%99%A8.png"></p><blockquote><p>选择属性</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E5%B1%9E%E6%80%A7.png"></p><blockquote><p>设置共享</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E5%85%B1%E4%BA%AB.png"></p><blockquote><p>通过VMnet8查看cloud2实际ip地址</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E9%80%82%E9%85%8D%E5%99%A82.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF.png"></p><blockquote><p>查看详细信息</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E7%9B%B8%E4%BF%A1%E4%BF%A1%E6%81%AF2.png"></p><p>这里的192.168.137.1可以认为是我们得到cloud2的真正的ip地址，用来做防火墙的网关，所以防火墙的上连接口需要配置一个和这个地址同一个网段ip地址，在我的项目中我配置了192.168.137.6/24这个地址。</p><h2 id="6-USG6000V的具体配置"><a href="#6-USG6000V的具体配置" class="headerlink" title="6. USG6000V的具体配置"></a><code>6. USG6000V的具体配置</code></h2><blockquote><p>这里我只是对防火墙能进行上网进行了配置，并不包含USG6000V的IPSEC隧道的打通、北向接口、日志上传、防火墙更新这些相关配置。防火墙上云端的相关配置请参考文章 <a href="https://fuyaoershang.xyz/2021/101910496.html">防火墙连接云端详细配置 </a>，这里的配置全部基于web页面进行配置。</p></blockquote><p>(1) 使用web界面登录到防火墙</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/web%E7%99%BB%E5%BD%95.PNG" alt="usgweb"></p><p>(2) 配置防火墙ip地址相关</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/image-20211019114515487.png" alt="防火墙ip"></p><p>这里GE0/0/0作为连接cloud1的接口使用。GE1/0/0做了三个子接口，用于作为下面三个vlan的网关来使用。GE1/0/1做为防火墙的出口。</p><p>(3) 配置安全策略</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A51.png"></p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A52.png" alt="安全策略"></p><p>这里只是对默认的default策略开启了全部允许，只是为了能够上网。</p><p>(4) nat策略配置（配置源地址转换，实现下面三个vlan的任意一个主机都可以上网）</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/pcnat%E7%AD%96%E7%95%A5%E4%B8%8A%E7%BD%91%E9%85%8D%E7%BD%AE.png" alt="nat策略"></p><p>(5) 配置路由使我们实现真正的上外网（ping 通 114.114.114.114）</p><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E8%B7%AF%E7%94%B1.png" alt="缺省路由"></p><p>这里我们配置的是一条缺省路由实现出去，192.168.137.1就是我们前面获取cloud2的真正的地址，来做为防火墙的下一条，出接口是GE1/0/1接口。</p><h2 id="7-验证是否实现上网"><a href="#7-验证是否实现上网" class="headerlink" title="7. 验证是否实现上网"></a><code>7. 验证是否实现上网</code></h2><p><img src="https://cdn.jsdelivr.net/gh/shixiuhai/Gallery1@master/%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91%E9%AA%8C%E8%AF%81.PNG"></p><p>这里选择vlan10的pc1和vlan30的pc5进行了一个验证，得pc上外网成功，至此这个项目操作结束。</p><h2 id="8-项目总结"><a href="#8-项目总结" class="headerlink" title="8. 项目总结"></a><code>8. 项目总结</code></h2><p>（1）本项目复习了华为交换机vlan的划分创建</p><p>（2）本项目验证了防火墙三层部署的简单情况</p><p>（3）本项目的难点在于cloud2配置绑定WLAN网卡，和防火墙需要配置一条缺省路由</p><p>（4）本项目的防火墙web配置也可以通过命令配置</p><h2 id="9-小贴士常用查询某个配置的命令"><a href="#9-小贴士常用查询某个配置的命令" class="headerlink" title="9. 小贴士常用查询某个配置的命令"></a><code>9. 小贴士常用查询某个配置的命令</code></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 进如命令模式进行命令配置</span>system-view <span class="token comment" spellcheck="true"># 配置命令的第一步</span><span class="token comment" spellcheck="true">## 查询当前的配置</span>display this<span class="token comment" spellcheck="true">## 查询创建了哪些vlan</span>display vlan<span class="token comment" spellcheck="true">## 设备状态信息刷屏</span>Tab<span class="token comment" spellcheck="true">## 查询接口配置ip状态</span>display ip interface brief<span class="token comment" spellcheck="true">## 查询接口状态</span>display interface brief<span class="token comment" spellcheck="true">## 清晰查看端口属于哪个vlan</span>display port vlan<span class="token comment" spellcheck="true">## 查看路由表</span>display ip routing-table<span class="token comment" spellcheck="true">## 查看接口有哪些配置</span>int 接口名display this</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> USG6000V三层部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-lfs的使用</title>
      <link href="/2021/101656698.html"/>
      <url>/2021/101656698.html</url>
      
        <content type="html"><![CDATA[<h2 id="git-lfs使用"><a href="#git-lfs使用" class="headerlink" title="git-lfs使用"></a><code>git-lfs使用</code></h2><blockquote><p>这是一个引用测试 &gt;</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开启lfs功能</span><span class="token function">git</span> lfs <span class="token function">install</span> <span class="token comment" spellcheck="true"># clone仓库到本地</span><span class="token function">git</span> lfs clone ?.url.git <span class="token comment" spellcheck="true"># 使用git clone也可以</span><span class="token comment" spellcheck="true"># 命令进行大文件追踪</span><span class="token function">git</span> lfs track <span class="token comment" spellcheck="true">#  例如git lfs track "*.png" 追踪所有后缀为png的文件</span><span class="token comment" spellcheck="true"># 查看现有的文件追踪模式,执行过 git lfs track file 后可以查看追踪了哪些文件</span><span class="token function">git</span> lfs track <span class="token comment" spellcheck="true"># 提交代码需要将gitattributes文件提交至仓库. 它保存了文件的追踪记录</span><span class="token function">git</span> add .gitattributes<span class="token comment" spellcheck="true"># .gitattributes文件提交后可以运行以下命令查看当前跟踪的文件列表</span><span class="token function">git</span> lfs ls-files <span class="token comment" spellcheck="true"># 上传和git方式一样</span><span class="token function">git</span> add file.psd<span class="token function">git</span> commit -m <span class="token string">"Add design file"</span><span class="token function">git</span> push origin main</code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码托管平台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git-lfs使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传项目代码到github</title>
      <link href="/2021/101621696.html"/>
      <url>/2021/101621696.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码托管到github平台"><a href="#代码托管到github平台" class="headerlink" title="代码托管到github平台"></a><code>代码托管到github平台</code></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置 username 和 email，添加远程地址</span><span class="token function">git</span> config --global user.name <span class="token string">"your name"</span><span class="token function">git</span> config --global user.email <span class="token string">"your_email@youremail.com"</span><span class="token comment" spellcheck="true"># 下载ssh私钥到本地</span><span class="token function">cd</span> ?/.ssh <span class="token comment" spellcheck="true"># 在windows或者linux的.ssh目录里把私钥拷贝下来,私钥的文件名字为id_rsa</span><span class="token comment" spellcheck="true"># 验证成功设置好用户名和密钥</span><span class="token function">ssh</span> -T git@github.com <span class="token comment" spellcheck="true"># 成功会出现Hi shixiuhai! You've successfully authenticated, but GitHub does not provide shell access.</span><span class="token comment" spellcheck="true"># 查看git本地初始化</span><span class="token function">git</span> config --list<span class="token comment" spellcheck="true">## 创建一个本地仓库并修改</span><span class="token comment" spellcheck="true"># 创建一个文件命名为README.md并写入"# smarthome"</span><span class="token keyword">echo</span> <span class="token string">"# smarthome"</span> <span class="token operator">>></span> README.md<span class="token comment" spellcheck="true"># 创建本地仓库</span><span class="token function">git</span> init<span class="token comment" spellcheck="true"># 创建一个文件命名为README.md并写入"# smarthome"</span><span class="token keyword">echo</span> <span class="token string">"# smarthome"</span> <span class="token operator">>></span> README.md<span class="token comment" spellcheck="true"># 把README.md项目文件添加到本地暂存区</span><span class="token function">git</span> add README.md <span class="token comment" spellcheck="true"># git add . 添加当前目录所有文件到本地仓库暂存区</span><span class="token comment" spellcheck="true"># 提交描述,并把暂存区内容提交到本地仓库</span><span class="token function">git</span> commit -m <span class="token string">"first commit"</span><span class="token comment" spellcheck="true"># 查看本地仓库文件状态</span><span class="token function">git</span> status<span class="token comment" spellcheck="true">## 将git clone下载到本地 生成的本地仓库 提交到远程仓库</span><span class="token function">git</span> clone ?.url.git<span class="token comment" spellcheck="true"># 创建一个文件命名为README.md并写入"# smarthome"</span><span class="token keyword">echo</span> <span class="token string">"# smarthome"</span> <span class="token operator">>></span> README.md<span class="token comment" spellcheck="true"># 把README.md项目文件添加到本地暂存区</span><span class="token function">git</span> add README.md <span class="token comment" spellcheck="true"># git add . 添加当前目录所有文件到本地仓库暂存区</span><span class="token comment" spellcheck="true"># 提交描述,并把暂存区内容提交到本地仓库</span><span class="token function">git</span> commit -m <span class="token string">"first commit"</span><span class="token comment" spellcheck="true"># 查看本地仓库文件状态</span><span class="token function">git</span> status<span class="token comment" spellcheck="true"># 把本地仓库文件上传到远程仓库</span><span class="token function">git</span> push <span class="token comment" spellcheck="true">## 在本地创建好项目上传到远程仓库</span><span class="token comment" spellcheck="true"># 创建一个文件命名为README.md并写入"# smarthome"</span><span class="token keyword">echo</span> <span class="token string">"# shixiuhai"</span> <span class="token operator">>></span> README.md<span class="token comment" spellcheck="true"># 创建本地仓库</span><span class="token function">git</span> init<span class="token comment" spellcheck="true"># 把README.md项目文件添加到本地暂存区</span><span class="token function">git</span> add README.md <span class="token comment" spellcheck="true"># git add . 添加当前目录所有文件到本地仓库暂存区</span><span class="token comment" spellcheck="true"># 提交描述,并把暂存区内容提交到本地仓库</span><span class="token function">git</span> commit -m <span class="token string">"first commit"</span><span class="token comment" spellcheck="true"># 提交到主分支上</span><span class="token function">git</span> branch -M main <span class="token comment" spellcheck="true"># 或者 创建名为main的分支</span><span class="token function">git</span> branch <span class="token comment" spellcheck="true"># 添加远程仓库对象origin和远程仓库地址</span><span class="token function">git</span> remote add origin git@github.com:shixiuhai/shixiuhai.git<span class="token comment" spellcheck="true"># 添加到远程仓库</span><span class="token function">git</span> push -u origin main <span class="token comment" spellcheck="true"># 或者git push -u origin master 或者git push  </span><span class="token comment" spellcheck="true">## 查看远程仓库对象和远程仓库连接地址</span><span class="token function">git</span> remote -v<span class="token comment" spellcheck="true">## 分支相关可参考 https://backlog.com/git-tutorial/cn/stepup/stepup2_3.html</span><span class="token comment" spellcheck="true">## 从远程仓库把代码修改合并到本地</span><span class="token function">git</span> pull <span class="token comment" spellcheck="true"># 或者 git pull origin, git pull 等于 git fetch remotename + git merge remotename branchname</span><span class="token comment" spellcheck="true">## 创建分支并和合并分支</span><span class="token function">git</span> branch branchname <span class="token comment" spellcheck="true"># 创建分支branchname是分支名字</span><span class="token comment" spellcheck="true"># 查看已经创建的分支</span><span class="token function">git</span> branch<span class="token comment" spellcheck="true"># 切换分支到branchname1 </span><span class="token function">git</span> checkout branchname1<span class="token comment" spellcheck="true"># 向master分支合并branchnam1分支</span><span class="token function">git</span> checkout master <span class="token comment" spellcheck="true"># 切换到主分支</span><span class="token function">git</span> merge issue1 <span class="token comment" spellcheck="true"># 将issue1分支合并到master</span><span class="token comment" spellcheck="true">## 删除已经创建的分支 branchname</span><span class="token function">git</span> branch -d branchname<span class="token comment" spellcheck="true">## 修改项目文件</span><span class="token comment" spellcheck="true"># 先进入修改</span>vim filename<span class="token comment" spellcheck="true"># 查看状态</span><span class="token function">git</span> status<span class="token comment" spellcheck="true"># 添加到暂存区</span><span class="token function">git</span> add filename<span class="token comment" spellcheck="true"># 暂存区提交到本地仓库</span><span class="token function">git</span> commit -m <span class="token string">"描述"</span><span class="token comment" spellcheck="true">## 删除项目文件</span><span class="token comment" spellcheck="true"># 从本地仓库中删除文件</span><span class="token function">git</span> <span class="token function">rm</span> filename<span class="token comment" spellcheck="true"># 删除源文件</span><span class="token function">rm</span> -rf filename<span class="token comment" spellcheck="true"># 提交暂存区到本地仓库</span><span class="token function">git</span> commit -m <span class="token string">"描述"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码托管平台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由交换基础配置</title>
      <link href="/2021/10154050.html"/>
      <url>/2021/10154050.html</url>
      
        <content type="html"><![CDATA[<!-- # 路由交换 --><h2 id="第一章-路由交换基础相关"><a href="#第一章-路由交换基础相关" class="headerlink" title="第一章 路由交换基础相关"></a><code>第一章 路由交换基础相关</code></h2><h3 id="1-1-交换机划分vlan相关配置"><a href="#1-1-交换机划分vlan相关配置" class="headerlink" title="1.1 交换机划分vlan相关配置"></a><code>1.1 交换机划分vlan相关配置</code></h3><pre class=" language-shell"><code class="language-shell">## sw1-1配置# 端口组的方式# 创建vlan10 20 30vlan batch 10 20 30# 创建端口组并命名为vlan10port-group vlan10# 将e0/0/2 到 e0/0/3划入到端口组中group-member e0/0/2 to e0/0/3# 设置端口类型trunk 或者 accessport link-type access# 设置端口属于vlanport default vlan 10## sw1-2配置# 端口方式# 创建vlan10 20 30vlan batch 10 20 30# 进入到端口中int e0/0/1# 设置端口类似为 accessport link-type access# 设置端口属于vlanport default vlan 10## sw2-1配置# 端口组的方式# 创建vlan10 20 30vlan batch 10 20 30# 创建端口组并命名为vlan10port-group vlan10# 将e0/0/2 到 e0/0/3划入到端口组中group-member e0/0/2 to e0/0/3# 设置端口类型trunk 或者 accessport link-type access# 设置端口属于vlanport default vlan 10## sw2-2配置# 端口方式# 创建vlan10 20 30vlan batch 10 20 30# 进入到端口中int e0/0/1# 设置端口类似为 accessport link-type access# 设置端口属于vlanport default vlan 10## sw3配置# 批量创建vlan vlan batch 10 20 30# 创建端口组命名为vlanallport-group vlanall# 将g0/0/1到g0/0/4划入到端口组中group-member GigabitEthernet0/0/1 to g0/0/4# 设置端口类型trunk 或者 accessport link-type trunk# 设置trunk允许通过的端口port trunk allow-pass vlan 10 20</code></pre><h3 id="1-2-单臂路由基础配置"><a href="#1-2-单臂路由基础配置" class="headerlink" title="1.2 单臂路由基础配置"></a><code>1.2 单臂路由基础配置</code></h3><pre class=" language-shell"><code class="language-shell">## AR2配置# 进入e0/0/0接口int e0/0/0# 开启接口二层交换功能undo portswitch# 进入子接口e0/0/0.1并命名子接口为e0/0/0.1（例如e0/0/0.10也可以）int e0/0/0.1# 设置vid、ip、arp允许dot1q termination vid 10ip address 10.0.0.1 255.255.255.0 arp broadcast enable# 进入子接口e0/0/0.2并命名子接口为e0/0/0.1（例如e0/0/0.10也可以）int e0/0/0.1# 设置vid、ip、arp允许dot1q termination vid 20ip address 172.1.1.1 255.255.255.0 arp broadcast enable# 进入子接口e0/0/0.3并命名子接口为e0/0/0.1（例如e0/0/0.10也可以）int e0/0/0.1# 设置vid、ip、arp允许dot1q termination vid 30ip address 192.168.0.1 255.255.255.0 arp broadcast enable</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由交换基础 </tag>
            
            <tag> 华为 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web渗透</title>
      <link href="/2021/101455981.html"/>
      <url>/2021/101455981.html</url>
      
        <content type="html"><![CDATA[<h1 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a><code>web渗透</code></h1><h2 id="第1章-基本搜索工具的使用"><a href="#第1章-基本搜索工具的使用" class="headerlink" title="第1章 基本搜索工具的使用"></a><code>第1章 基本搜索工具的使用</code></h2><h3 id="1-1-Google语法使用"><a href="#1-1-Google语法使用" class="headerlink" title="1.1 Google语法使用"></a><code>1.1 Google语法使用</code></h3><p>关于谷歌相关的语法搜索列表</p><table><thead><tr><th>关键词</th><th>示例1</th><th>示例2</th></tr></thead><tbody><tr><td>site</td><td>site:edu.cn（搜索指定站点）</td><td>“site:edu.en”</td></tr><tr><td>link</td><td>link:<a href="http://www.baidu.com（这个的功能是查询所有链接到某个特定URL上的列表。要注意的是，是特定的URL页面，如输入：“link:www.baidu.com”进行搜索，如下图所示，就会返回所有链接到百度主页的网页了。因此，我们同样可以指定特定的URL页面来进行搜索）">www.baidu.com（这个的功能是查询所有链接到某个特定URL上的列表。要注意的是，是特定的URL页面，如输入：“link:www.baidu.com”进行搜索，如下图所示，就会返回所有链接到百度主页的网页了。因此，我们同样可以指定特定的URL页面来进行搜索）</a></td><td>“link:<a href="http://www.baidu.com&quot;/">www.baidu.com&quot;</a></td></tr><tr><td>inurl</td><td>inurl:ww.baidu.com（inurl语法返回的网页链接中包含第一个关键字，后面的关键字则出现在链接中或者网页文档中）</td><td>“inurl:ww.baidu.com”</td></tr><tr><td>allinurl</td><td>allinurl:<a href="http://www.baidu.com(返回的网页的链接中包含所有查询关键字.这个查询的对象只集中于网页的链接字符串)/">www.baidu.com（返回的网页的链接中包含所有查询关键字。这个查询的对象只集中于网页的链接字符串）</a></td><td>“allinurl:<a href="http://www.baidu.com&quot;/">www.baidu.com&quot;</a></td></tr><tr><td>intitle</td><td>intitle:index.of(allintitle和intitle的用法类似于上面的allinurl和inurl，只是后者对URL进行查询，而前者对网页的标题栏进行查询。网页标题，就是HTML标记语言中之间的部分。网页设计的一个原则就是要把主页的关键内容用简洁的语言表示在网页标题中。因此，只查询标题栏，通常也可以找到高相关率的专题页面)</td><td>“intitle:index.of”</td></tr><tr><td>allintitle</td><td>allintitle:index.of</td><td>“intitle:index.of”</td></tr><tr><td>info</td><td>info:<a href="http://www.baidu.com(这个语法可以搜索到关于一个url的更多信息的页面列表,这里的信息包括这个网页的cache,还有与这个网页相似的网页等等,注意下面的英文信息就好)/">www.baidu.com（这个语法可以搜索到关于一个URL的更多信息的页面列表，这里的信息包括这个网页的cache，还有与这个网页相似的网页等等，注意下面的英文信息就好）</a></td><td>“info:<a href="http://www.baidu.com&quot;/">www.baidu.com&quot;</a></td></tr><tr><td>intext</td><td>intext:<a href="http://www.baidu.com（“intext:”是用来搜索网页正文内容的，这样就可以忽略网页中的超文本链接、URL和题目）">www.baidu.com（“intext:”是用来搜索网页正文内容的，这样就可以忽略网页中的超文本链接、URL和题目）</a></td><td>“intext:<a href="http://www.baidu.com&quot;/">www.baidu.com&quot;</a></td></tr><tr><td>inanchor</td><td>inanchor:<a href="http://www.baidu.com（这个语法的意思是在页面的链接锚点进行搜索，链接锚点指的是一个链接的描述文本，如这样的一段HTML代码：`">www.baidu.com（这个语法的意思是在页面的链接锚点进行搜索，链接锚点指的是一个链接的描述文本，如这样的一段HTML代码：`</a><a href=https://www.baidu.com>百度</a>`，链接的锚点就是“百度”了）</td><td></td></tr><tr><td>related</td><td>related:<a href="http://www.sina.com.cn/index.shtml">www.sina.com.cn/index.shtml</a> (related用来搜索结构内容方面相似的网页。例：搜索所有与中文新浪网主页相似的页面如网易首页，搜狐首页，中华网首页等）</td><td>“related:<a href="http://www.sina.com.cn/index.shtml&quot;">www.sina.com.cn/index.shtml&quot;</a></td></tr><tr><td>cache</td><td>cache:<a href="http://www.baidu.com(cache可以帮助我们查找到google索引过的页面副本,它最大的好处就是及时源文件界面不存在了,或者变成了其它的内容,我们依然可以搜索的到)/">www.baidu.com（Cache可以帮助我们查找到google索引过的页面副本，它最大的好处就是及时源文件界面不存在了，或者变成了其它的内容，我们依然可以搜索的到）</a></td><td>“cache:<a href="http://www.baidu.com&quot;/">www.baidu.com&quot;</a></td></tr><tr><td>filetype</td><td>filetype:mdb（filetype是指搜索指定后缀的文件。这个不太常用，但是在黑客领域有一定的作用。但是我们的重点是讲解语法，如下图所示，输入“filetype:mdb”，结果就会显示出一些网站的数据库文件）</td><td>“filetype:pdf”</td></tr><tr><td>+</td><td>“关键词a” + “关键词b”</td><td></td></tr><tr><td>-</td><td>“关键词a” - “关键词b”</td><td></td></tr><tr><td>OR</td><td>“关键词a” OR “关键词b”</td><td></td></tr></tbody></table><h2 id="1-2-Shodan语法使用"><a href="#1-2-Shodan语法使用" class="headerlink" title="1.2 Shodan语法使用"></a><code>1.2 Shodan语法使用</code></h2><table><thead><tr><th>关键词</th><th>示例1</th></tr></thead><tbody><tr><td>一般搜索</td><td>关键词+关键词   apache2 country:”CN”/  webcam contry:”US” / “webcam” country:”US”</td></tr><tr><td>限定国家</td><td>country:”CN”</td></tr><tr><td>限定城市</td><td>city:”ShangHai”</td></tr><tr><td>限定主机名或域名</td><td>hostname:.org / hostname:”google” / hostname:baidu.com</td></tr><tr><td>限定组织或机构</td><td>org:”alibaba”</td></tr><tr><td>限定系统OS版本</td><td>os:”Windows Server 2008 R2”  / os:”Windows 7 or 8” / os:”Linux 2.6.x”</td></tr><tr><td>限定端口</td><td>port:22 / port:80</td></tr><tr><td>指定网段或ip</td><td>net:”59.56.19.0/24” / net:121.24.35.1</td></tr><tr><td>指定使用的软件或产品</td><td>product:”Apache httpd” / product:”nginx”/ product:”Microsoft IIS httpd” / product:”mysql”</td></tr><tr><td>指定CVE漏洞编号</td><td>vuln:”CVE-2014-0723”</td></tr><tr><td>指定网页内容</td><td>http.html:”hello world”</td></tr><tr><td>指定网页标题</td><td>http.title:”hello”</td></tr><tr><td>指定返回响应码</td><td>http.status:200</td></tr><tr><td>指定返回中的server类型</td><td>http.server:Apache/2.4.7 / http.server:PHP</td></tr><tr><td>指定地理位置</td><td>geo:”31.25,121.44”</td></tr><tr><td>指定ISP供应商</td><td>isp:”China Telecom”</td></tr><tr><td>搜索指定的软件版本</td><td>version:”7.1.4”</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="1-3-kali-网络、DNS配置、远程ssh连接配置"><a href="#1-3-kali-网络、DNS配置、远程ssh连接配置" class="headerlink" title="1.3 kali 网络、DNS配置、远程ssh连接配置"></a><code>1.3 kali 网络、DNS配置、远程ssh连接配置</code></h3><pre class=" language-shell"><code class="language-shell">#### 网络配置为静态网卡vim /etc/network/interfaces## 添加以下内容# The loopback network interfaceauto loiface lo inet loopbackauto eth0iface eth0 inet staticaddress 192.168.1.2netmask 255.255.255.0gateway 192.168.1.254dns-nameservers 114.114.114.114#### DNS配置为 114.114.114.114vim /etc/resolv.conf## 添加以下内容# Generated by NetworkManagernameserver 114.114.114.114#### 配置远程允许root用户和私钥进行ssh登录vim /etc/ssh/sshd_config## 修改或者添加一下内容# 允许root和秘钥登录PermitRootLogin yesPubkeyAuthentication yes</code></pre><h2 id="第2章-BurpSuite使用"><a href="#第2章-BurpSuite使用" class="headerlink" title="第2章 BurpSuite使用"></a><code>第2章 BurpSuite使用</code></h2><p>BurpSuite中文汉化版使用相关教程 <a href="https://www.xcnte.com/archives/426/">https://www.xcnte.com/archives/426/</a></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="第三章-OSWAP使用"><a href="#第三章-OSWAP使用" class="headerlink" title="第三章 OSWAP使用"></a><code>第三章 OSWAP使用</code></h2><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h4 id="1-sqlmap-扫描"><a href="#1-sqlmap-扫描" class="headerlink" title="1 .sqlmap 扫描"></a><font color=gren>1 .sqlmap 扫描</font></h4><p>扫描网址：<a href="https://damocles.compoundevents.org/post.php?id=109">https://damocles.compoundevents.org/post.php?id=109</a></p><p>扫描参数：sqlmap -u “<a href="https://damocles.compoundevents.org/post.php?id=109&quot;">https://damocles.compoundevents.org/post.php?id=109&quot;</a>  –random-agent -D conmpoun6-wp232 –tables</p><p>数据表：</p><ul><li><p>compoun6_wp232</p></li><li><p>information_schema</p></li></ul><p>compoun6_wp232 数据库数据表：</p><p>+————————————+<br>| wpvs_commentmeta                   |<br>| wpvs_comments                      |<br>| wpvs_groups_capability             |<br>| wpvs_groups_group                  |<br>| wpvs_groups_group_capability       |<br>| wpvs_groups_user_capability        |<br>| wpvs_groups_user_group             |<br>| wpvs_links                         |<br>| wpvs_loginizer_logs                |<br>| wpvs_mendeleycache                 |<br>| wpvs_options                       |<br>| wpvs_postmeta                      |<br>| wpvs_posts                         |<br>| wpvs_teachpress_artefacts          |<br>| wpvs_teachpress_assessments        |<br>| wpvs_teachpress_authors            |<br>| wpvs_teachpress_course_capabilites |<br>| wpvs_teachpress_course_documents   |<br>| wpvs_teachpress_course_meta        |<br>| wpvs_teachpress_courses            |<br>| wpvs_teachpress_pub                |<br>| wpvs_teachpress_pub_capabilites    |<br>| wpvs_teachpress_pub_documents      |<br>| wpvs_teachpress_pub_imports        |<br>| wpvs_teachpress_pub_meta           |<br>| wpvs_teachpress_rel_pub_auth       |<br>| wpvs_teachpress_relation           |<br>| wpvs_teachpress_settings           |<br>| wpvs_teachpress_signup             |<br>| wpvs_teachpress_stud               |<br>| wpvs_teachpress_stud_meta          |<br>| wpvs_teachpress_tags               |<br>| wpvs_teachpress_user               |<br>| wpvs_term_relationships            |<br>| wpvs_term_taxonomy                 |<br>| wpvs_termmeta                      |<br>| wpvs_terms                         |<br>| wpvs_usermeta                      |<br>| wpvs_users                         |<br>+————————————+</p><p>information_schema 数据库数据表：</p><p>+—————————————+<br>| CHARACTER_SETS                        |<br>| CLIENT_STATISTICS                     |<br>| COLLATIONS                            |<br>| COLLATION_CHARACTER_SET_APPLICABILITY |<br>| COLUMN_PRIVILEGES                     |<br>| ENGINES                               |<br>| EVENTS                                |<br>| FILES                                 |<br>| GLOBAL_STATUS                         |<br>| GLOBAL_TEMPORARY_TABLES               |<br>| GLOBAL_VARIABLES                      |<br>| INDEX_STATISTICS                      |<br>| INNODB_BUFFER_PAGE                    |<br>| INNODB_BUFFER_PAGE_LRU                |<br>| INNODB_BUFFER_POOL_STATS              |<br>| INNODB_CHANGED_PAGES                  |<br>| INNODB_CMP                            |<br>| INNODB_CMPMEM                         |<br>| INNODB_CMPMEM_RESET                   |<br>| INNODB_CMP_PER_INDEX                  |<br>| INNODB_CMP_PER_INDEX_RESET            |<br>| INNODB_CMP_RESET                      |<br>| INNODB_FT_BEING_DELETED               |<br>| INNODB_FT_CONFIG                      |<br>| INNODB_FT_DEFAULT_STOPWORD            |<br>| INNODB_FT_DELETED                     |<br>| INNODB_FT_INDEX_CACHE                 |<br>| INNODB_FT_INDEX_TABLE                 |<br>| INNODB_LOCKS                          |<br>| INNODB_LOCK_WAITS                     |<br>| INNODB_METRICS                        |<br>| INNODB_SYS_COLUMNS                    |<br>| INNODB_SYS_DATAFILES                  |<br>| INNODB_SYS_FIELDS                     |<br>| INNODB_SYS_FOREIGN                    |<br>| INNODB_SYS_FOREIGN_COLS               |<br>| INNODB_SYS_INDEXES                    |<br>| INNODB_SYS_TABLES                     |<br>| INNODB_SYS_TABLESPACES                |<br>| INNODB_SYS_TABLESTATS                 |<br>| INNODB_SYS_VIRTUAL                    |<br>| INNODB_TABLESPACES_ENCRYPTION         |<br>| INNODB_TABLESPACES_SCRUBBING          |<br>| INNODB_TEMP_TABLE_INFO                |<br>| INNODB_TRX                            |<br>| KEY_COLUMN_USAGE                      |<br>| OPTIMIZER_TRACE                       |<br>| PARAMETERS                            |<br>| PARTITIONS                            |<br>| PLUGINS                               |<br>| PROCESSLIST                           |<br>| PROFILING                             |<br>| REFERENTIAL_CONSTRAINTS               |<br>| ROUTINES                              |<br>| SCHEMATA                              |<br>| SCHEMA_PRIVILEGES                     |<br>| SESSION_STATUS                        |<br>| SESSION_VARIABLES                     |<br>| TABLESPACES                           |<br>| TABLE_CONSTRAINTS                     |<br>| TABLE_PRIVILEGES                      |<br>| TABLE_STATISTICS                      |<br>| TEMPORARY_TABLES                      |<br>| THREAD_STATISTICS                     |<br>| TRIGGERS                              |<br>| USER_PRIVILEGES                       |<br>| USER_STATISTICS                       |<br>| VIEWS                                 |<br>| XTRADB_INTERNAL_HASH_TABLES           |<br>| XTRADB_READ_VIEW                      |<br>| XTRADB_RSEG                           |<br>| XTRADB_ZIP_DICT                       |<br>| XTRADB_ZIP_DICT_COLS                  |<br>| COLUMNS                               |<br>| STATISTICS                            |<br>| TABLES                                |<br>+—————————————+</p><p>查询其中某一张表的内容：</p><p>sqlmap -u “<a href="https://damocles.compoundevents.org/post.php?id=109&quot;">https://damocles.compoundevents.org/post.php?id=109&quot;</a>  -t 5  –random-agent -D information_schema   -T KEY_COLUMN_USAGE  –columns </p><p>查询表中的字段： </p><p>+——————-+————————————+<br>| user_login        | user_pass                          |<br>+——————-+————————————+<br>| dirkE             | $P$BphxuJTLbBrLRI70FK3Gq8uRKDFpoj1 |<br>| anaisC            | $P$B8u1KNzF5eFXVAe1ZVxcCxj8.2UO4j1 |<br>| NinaRidder        | $P$BzZeqQ.Qu02E89yI9eoSghcqUJ3Pcw1 |<br>| PhilipWard        | $P$Bsl4CSrPQ/Jr/U47kLw7MADCHrdiH90 |<br>| HesselWinsemius   | $P$BDpmNsugn4qXEo8r8L/rnH6Zr03zPz0 |<br>| EmanueleBevacqua  | $P$B4TLlQh.SnYS0AgfIA93TSmN0qELnr. |<br>| AntoniaSebastian  | $P$BLZpW2QSgwPlIlib5PnhCX4ahO/O7z1 |<br>| test              | $P$B9jxrqgOHfL71oTuraeFZmXZy7wY3X/ |<br>| KarinW            | $P$B1W5dvRnwZkDOVLl4Qza4xvD6TDwMo. |<br>| JakobZscheischler | $P$Bjlc/BfsIi7ENsyguNqGVs981Rxx1d/ |<br>| ThomasWahl        | $P$BWyrB0tusTrOxOYGq7MldJv2pYLVcM1 |<br>| AlexC             | $P$BqcYW6Nk6/RcERK7tuYfEu.WaiIyL30 |<br>| JannisH           | $P$BCBrg2m1tkIL.9f2ZKQs/shq2d5UuG/ |<br>| AloisT            | $P$BTfccK84Knge1ZbldGY5fqtGX8udAE. |<br>| DirkD             | $P$BsN7CeVOjrgvhQnXlcGSmTW58Ind5n1 |<br>| oliviaR           | $P$BmGLIII.l3i9roEgdEUInzid9DMp1y0 |<br>| AlexandreR        | $P$B1x/sgMfxOVAq72wVFMcnbeiY0nBQ8/ |<br>| WimT              | $P$BNcxFnJN.SMlhNB75FlLZxRVh.Devz/ |<br>| ColinR            | $P$BXK0R9cZpgu29VCs8/6jCMJPs5mfM9/ |<br>| ElisaR            | $P$BPEsvmIlt2xhoJ8tj1mw3LB30VOYaX. |<br>| MojtabaS          | $P$B9dhn/vo07px1PGgQPRHuzKu3phX1.1 |<br>+——————-+————————————+</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web渗透集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java笔记</title>
      <link href="/2021/101456103.html"/>
      <url>/2021/101456103.html</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-学习笔记"><a href="#JAVA-学习笔记" class="headerlink" title="JAVA 学习笔记"></a>JAVA 学习笔记</h1><h3 id="java基础入门路线图参考"><a href="#java基础入门路线图参考" class="headerlink" title="java基础入门路线图参考"></a><code>java基础入门路线图参考</code></h3><ul><li><input checked="" disabled="" type="checkbox"> <strong>java环境配置</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>java语言特性</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>java体系平台</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>java虚拟机</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>java垃圾回收</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>jvm、jre、jdk关系</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>java注释</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>java文本编辑器和集成环境</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>java 变量的概念和定义</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>java数据类型</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>java算数运算符</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>赋值运算符</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>比较运算符</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>逻辑运算符</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>位运算符</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>三元运算符</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>运算符优先级</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>顺序结构</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>分支结构</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>循环结果for和while</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>嵌套循环</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>一维数组和多维数组</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>数组常见算法</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>面对对象编程</strong></li><li><input disabled="" type="checkbox"> <strong>类的写法</strong></li><li><input disabled="" type="checkbox"> <strong>对象创建和应用</strong></li><li><input disabled="" type="checkbox"> <strong>类的属性</strong></li><li><input disabled="" type="checkbox"> <strong>类的方法</strong></li><li><input disabled="" type="checkbox"> <strong>方法重载</strong></li><li><input disabled="" type="checkbox"> <strong>方法参数传递</strong></li><li><input disabled="" type="checkbox"> <strong>包package和引用import</strong></li><li><input disabled="" type="checkbox"> <strong>封装和隐藏</strong></li><li><input disabled="" type="checkbox"> <strong>访问权限修饰符</strong></li><li><input disabled="" type="checkbox"> <strong>类的构造方法</strong></li><li><input disabled="" type="checkbox"> <strong>构造方法重载</strong></li><li><input disabled="" type="checkbox"> <strong>this关键字</strong></li><li><input disabled="" type="checkbox"> <strong>_javaBean</strong></li><li><input disabled="" type="checkbox"> <strong>继承</strong></li><li><input disabled="" type="checkbox"> <strong>单继承和多继承</strong></li><li><input disabled="" type="checkbox"> <strong>父子类与访问修饰符的关系</strong></li><li><input disabled="" type="checkbox"> <strong>关键字super</strong></li><li><input disabled="" type="checkbox"> <strong>关键字super和this区别</strong></li><li><input disabled="" type="checkbox"> <strong>java对象实例化过程</strong></li><li><input disabled="" type="checkbox"> <strong>多态性</strong></li><li><input disabled="" type="checkbox"> <strong>对象类型转换</strong></li><li><input disabled="" type="checkbox"> <strong>==与equals</strong></li><li><input disabled="" type="checkbox"> <strong>包封装和tostring</strong></li><li><input disabled="" type="checkbox"> <strong>关键字static</strong></li><li><input disabled="" type="checkbox"> <strong>单例设计模式</strong></li><li><input disabled="" type="checkbox"> <strong>代码块</strong></li><li><input disabled="" type="checkbox"> <strong>关键字final</strong></li><li><input disabled="" type="checkbox"> <strong>抽象类</strong></li><li><input disabled="" type="checkbox"> <strong>模板设计方式</strong></li><li><input disabled="" type="checkbox"> <strong>接口</strong></li><li><input disabled="" type="checkbox"> <strong>工厂模式</strong></li><li><input disabled="" type="checkbox"> <strong>内部类</strong></li><li><input disabled="" type="checkbox"> <strong>捕获异常</strong></li><li><input disabled="" type="checkbox"> <strong>Hashset集合</strong></li><li><input disabled="" type="checkbox"> <strong>List集合</strong></li><li><input disabled="" type="checkbox"> <strong>map集合</strong></li><li><input disabled="" type="checkbox"> <strong>工具类Collections</strong></li><li><input disabled="" type="checkbox"> <strong>为什么使用范型</strong></li><li><input disabled="" type="checkbox"> <strong>范型相关</strong></li><li><input disabled="" type="checkbox"> <strong>file类及相关</strong></li><li><input disabled="" type="checkbox"> <strong>文件字节流相关</strong></li><li><input disabled="" type="checkbox"> <strong>对象流</strong></li><li><input disabled="" type="checkbox"> <strong>随机存取流</strong></li><li><input disabled="" type="checkbox"> <strong>反射机制概况</strong></li><li><input disabled="" type="checkbox"> <strong>class类</strong></li><li><input disabled="" type="checkbox"> <strong>反射机制相关</strong></li><li><input disabled="" type="checkbox"> <strong>java动态代理</strong></li><li><input disabled="" type="checkbox"> <strong>线程</strong></li><li><input disabled="" type="checkbox"> <strong>线程的同步与死锁</strong></li><li><input disabled="" type="checkbox"> <strong>线程通信</strong></li></ul><h2 id="第1章-Java-环境变量配置"><a href="#第1章-Java-环境变量配置" class="headerlink" title="第1章 Java 环境变量配置"></a><code>第1章 Java 环境变量配置</code></h2><ul><li><p>配置 JAVA_HOME 变量，在系统环境变量里添加JAVA_HOME变量 C:\Users\15256\OneDrive\史秀海项目\编程语言学习\java\jdk1.8.0_102\jdk1.8.0_102</p></li><li><p>配置CLASSPATH变量 ，在系统环境变量里添加</p><p>CLASSPATH变量  .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</p></li><li><p>path变量添加两个：%JAVA_HOME%\bin; %JAVA_HOME%\jre\bin;</p></li></ul><h2 id="第2章-java运算符相关"><a href="#第2章-java运算符相关" class="headerlink" title="第2章 java运算符相关"></a><code>第2章 java运算符相关</code></h2><h2 id="第3章-java循环结构相关"><a href="#第3章-java循环结构相关" class="headerlink" title="第3章 java循环结构相关"></a><code>第3章 java循环结构相关</code></h2><h2 id="第四章-类和对象相关"><a href="#第四章-类和对象相关" class="headerlink" title="第四章 类和对象相关"></a><code>第四章 类和对象相关</code></h2><h3 id="5-运行Java第一个程序-hello-word"><a href="#5-运行Java第一个程序-hello-word" class="headerlink" title="5.  运行Java第一个程序 hello word"></a>5.  运行Java第一个程序 hello word</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><h3 id="程序基础逻辑集合"><a href="#程序基础逻辑集合" class="headerlink" title="程序基础逻辑集合"></a>程序基础逻辑集合</h3></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *      * 这是文本注释     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 单行注释</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        java变量的概念和定义        1. 基本数据类型(8种)            1. 整数数据类型（byte、short、int、long）            2. 浮点类型 （float、 double） float a = 1.22f            3. 字符类型 （char）            4. 布尔类型 （boolean） 布尔类型只要true和false        2. 引用数据类型            1. string类型 (String)            */</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1.33f</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> i <span class="token operator">+</span> a<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token string">"hell"</span> <span class="token operator">+</span> <span class="token string">"o"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"print word is "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        三元运算符（三目运算符）        条件表达式?表达式1:表达式2;        */</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> d <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取三个数中较大的数 （通过三元运算符号）</span>        <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a3 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1 <span class="token operator">></span> a2 <span class="token operator">?</span> <span class="token punctuation">(</span>a1 <span class="token operator">></span> a3 <span class="token operator">?</span> a1 <span class="token operator">:</span> a3<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>a2 <span class="token operator">></span> a3 <span class="token operator">?</span> a2 <span class="token operator">:</span> a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        java 分支结构 if-else, switch        */</span>        <span class="token keyword">int</span> b1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> k1 <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b1 <span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> k1 <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 如果数字1输出星期一以此类推 (case数字的应用)</span>       <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token keyword">switch</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不知道星期几"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// case 字符串上的使用</span>       String str <span class="token operator">=</span> <span class="token string">"bcd"</span><span class="token punctuation">;</span>       <span class="token keyword">switch</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"a"</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"bcd"</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I don'not know"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// case语句字符上的使用</span>       <span class="token keyword">int</span> s1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>       <span class="token keyword">switch</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'b'</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no char"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/*        java 循环结构 for while do/while        */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i2 <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i2<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 三位数拆解各个位数</span>        <span class="token comment" spellcheck="true">// 通过while循环输出1到100数字</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"while 循环的值是 "</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// for 循环return的使用</span>        <span class="token comment" spellcheck="true">// for(int v = 0; v &lt; 9; v++)&amp;#123;</span>        <span class="token comment" spellcheck="true">//     if(v == 7)&amp;#123;</span>                        <span class="token comment" spellcheck="true">//          return; // 看上去效果和break一样，实际上是退出整个类。</span>        <span class="token comment" spellcheck="true">//     &amp;#125;</span>        <span class="token comment" spellcheck="true">//     System.out.println(v);</span>                    <span class="token comment" spellcheck="true">// &amp;#125;</span>                <span class="token comment" spellcheck="true">/*        java 的一位数组定义        type var[]; 或者 type[] var;        int a[]; int[] a1; double b[]; Mydate[] c;        */</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ii <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明一个能放4个int类型的数据数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ii0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明了一个存放1、2、3、4这四个数的数组</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组内每个数都有一个下标，这个下标是数字</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"strs的长度是 "</span> <span class="token operator">+</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*        java 多维数组和命名方法         type var[][]; 或者 type[][] var;        */</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第一维部分长度是2，第二维也就是第一维每个元素长度是3</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只定义第一维长度，第二维不定义</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 二维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 特殊写法，c1是一维数组，c2是二维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组的一维长度</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> g <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> g<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr0 <span class="token operator">=</span> arr<span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> llen <span class="token operator">=</span> arr0<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> llen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res <span class="token operator">+=</span> arr0<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这个二维数组的和是："</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        java 常见数组算法        求数组中元素的最大值，最小值，总数，平均数        */</span>        <span class="token comment" spellcheck="true">// 求数组中元素最大值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最大值</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 假设 arr[0]是最大值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i5 <span class="token operator">&lt;</span> arr3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i5<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> arr3<span class="token punctuation">[</span>i5<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                max <span class="token operator">=</span> arr3<span class="token punctuation">[</span>i5<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存放最大值</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 总和平均数</span>        <span class="token keyword">int</span> res1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i6 <span class="token operator">&lt;</span> arr3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i6<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res1 <span class="token operator">+=</span> arr3<span class="token punctuation">[</span>i6<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"res1这个数组总和是："</span> <span class="token operator">+</span> res1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"res1这个数组的平均数是"</span> <span class="token operator">+</span> res1<span class="token operator">/</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 注意复制不是赋值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr3<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i7 <span class="token operator">&lt;</span> arr3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i7<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            copy<span class="token punctuation">[</span>i7<span class="token punctuation">]</span> <span class="token operator">=</span> arr3<span class="token punctuation">[</span>i7<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反转</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr3<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i8 <span class="token operator">&lt;</span> arr3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i8<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            temp<span class="token punctuation">[</span>i8<span class="token punctuation">]</span> <span class="token operator">=</span> arr3<span class="token punctuation">[</span>arr3<span class="token punctuation">.</span>length<span class="token operator">-</span>i8<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组元素排序 冒泡排序(从大到小或者从小到大进行排序)</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> m<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> m<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    temp1 <span class="token operator">=</span> m<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    m<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    m<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp1<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         面向对象编程         */</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明一个Person类型变量，变量名为person</span>        <span class="token comment" spellcheck="true">// new Person() 就是实例化Person类</span>        person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 给Person对象的name属性赋值</span>        person<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对象方法调用</span>                       Animal ani <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ani<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"大米小米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ani<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token string">"飞翔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Person 类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 人 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 姓名,String 的默认值是null</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 年龄，int 的默认值是0</span>    <span class="token comment" spellcheck="true">// 行为, 方法, 也叫函数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方法的名称如果是多个单词,首个单词字母小写，其他字母单词大写，驼峰命名法</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Animal 类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 动物的类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 动物名称</span>    <span class="token keyword">int</span> eye<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 眼睛的个数</span>    <span class="token keyword">int</span> legs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 几条腿</span>    <span class="token comment" spellcheck="true">/**     * param food 食物     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>String food<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此动物的食物是: "</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 动物的移动方式     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span>String moveType<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此动物的移动方式是: "</span> <span class="token operator">+</span> moveType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp配置相关</title>
      <link href="/2021/092915509.html"/>
      <url>/2021/092915509.html</url>
      
        <content type="html"><![CDATA[<h2 id="frp-服务端配置"><a href="#frp-服务端配置" class="headerlink" title="frp 服务端配置"></a>frp 服务端配置</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> frp_0.33.0_linux_amd64/<span class="token function">vi</span> frps.ini<span class="token punctuation">[</span>common<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># frp监听的端口，默认是7000，可以改成其他的</span>bind_port <span class="token operator">=</span> 7000<span class="token comment" spellcheck="true"># 授权码，请改成更复杂的</span>token <span class="token operator">=</span> 52010  <span class="token comment" spellcheck="true"># 这个token之后在客户端会用到</span><span class="token comment" spellcheck="true"># frp管理后台端口，请按自己需求更改</span>dashboard_port <span class="token operator">=</span> 7500<span class="token comment" spellcheck="true"># frp管理后台用户名和密码，请改成自己的</span>dashboard_user <span class="token operator">=</span> admindashboard_pwd <span class="token operator">=</span> adminenable_prometheus <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true"># 配置http代理</span>vhost_http_port <span class="token operator">=</span> 80<span class="token comment" spellcheck="true"># 配置https代理</span>vhost_https_port <span class="token operator">=</span> 443<span class="token comment" spellcheck="true"># frp日志配置</span>log_file <span class="token operator">=</span> /var/log/frps.loglog_level <span class="token operator">=</span> infolog_max_days <span class="token operator">=</span> 3<span class="token comment" spellcheck="true">## 设置和启动frp服务</span><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/frp<span class="token function">sudo</span> <span class="token function">cp</span> frps.ini /etc/frp<span class="token function">sudo</span> <span class="token function">cp</span> frps /usr/bin<span class="token function">sudo</span> <span class="token function">cp</span> systemd/frps.service /usr/lib/systemd/system/<span class="token comment" spellcheck="true"># (或者 /lib/systemd/system)</span><span class="token function">sudo</span> systemctl <span class="token function">enable</span> frps<span class="token function">sudo</span> systemctl start frpssystemctl daemon-reloadsystemctl <span class="token function">enable</span> disk-space-check.service<span class="token comment" spellcheck="true">## 设计开机自启动</span>$ <span class="token function">cat</span> /usr/lib/systemd/system/mycmd.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description <span class="token operator">=</span> some shell script<span class="token comment" spellcheck="true"># 要求脚本具有可执行权限</span>ConditionFileIsExecutable<span class="token operator">=</span>/usr/bin/some.sh<span class="token comment" spellcheck="true"># 指定要运行的命令、脚本</span><span class="token punctuation">[</span>Service<span class="token punctuation">]</span>ExecStart <span class="token operator">=</span> /usr/bin/some.sh<span class="token comment" spellcheck="true"># 下面这段不能少</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy <span class="token operator">=</span> multi-user.target$ systemctl daemon-reload$ systemctl <span class="token function">enable</span> mycmd.service<span class="token comment" spellcheck="true">## 防火墙开放端口</span><span class="token comment" spellcheck="true"># 添加监听端口</span><span class="token function">sudo</span> firewall-cmd --permanent --add-port<span class="token operator">=</span>7000/tcp<span class="token comment" spellcheck="true"># 添加管理后台端口</span><span class="token function">sudo</span> firewall-cmd --permanent --add-port<span class="token operator">=</span>7500/tcp<span class="token function">sudo</span> firewall-cmd --reload</code></pre><h2 id="frp-客户端配置"><a href="#frp-客户端配置" class="headerlink" title="frp 客户端配置"></a>frp 客户端配置</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> frpc.ini  <span class="token comment" spellcheck="true"># (注意哦，不是frps.ini)</span><span class="token comment" spellcheck="true"># 客户端配置</span><span class="token punctuation">[</span>common<span class="token punctuation">]</span>server_addr <span class="token operator">=</span> 服务器ipserver_port <span class="token operator">=</span> 7000 <span class="token comment" spellcheck="true"># 与frps.ini的bind_port一致</span>token <span class="token operator">=</span> 52010  <span class="token comment" spellcheck="true"># 与frps.ini的token一致</span><span class="token comment" spellcheck="true"># 配置ssh服务</span><span class="token punctuation">[</span>ssh<span class="token punctuation">]</span><span class="token function">type</span> <span class="token operator">=</span> tcplocal_ip <span class="token operator">=</span> 127.0.0.1local_port <span class="token operator">=</span> 22remote_port <span class="token operator">=</span> 6000  <span class="token comment" spellcheck="true"># 这个自定义，之后再ssh连接的时候要用</span><span class="token comment" spellcheck="true"># 配置http服务，可用于小程序开发、远程调试等，如果没有可以不写下面的</span><span class="token punctuation">[</span>web<span class="token punctuation">]</span><span class="token function">type</span> <span class="token operator">=</span> httplocal_ip <span class="token operator">=</span> 127.0.0.1local_port <span class="token operator">=</span> 8080subdomain <span class="token operator">=</span> test.hijk.pw  <span class="token comment" spellcheck="true"># web域名</span>remote_port <span class="token operator">=</span> 自定义的远程服务器端口，例如8080<span class="token comment" spellcheck="true">## web相关配置</span><span class="token punctuation">[</span>walterlv_example_http<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 依然支持 http 访问</span><span class="token function">type</span> <span class="token operator">=</span> http<span class="token comment" spellcheck="true"># 本地 Web 服务的端口</span>local_port <span class="token operator">=</span> 10000<span class="token comment" spellcheck="true"># 需要反向代理的域名（当访客通过此域名访问 A 机器时，才会将请求反向代理到此 Web 服务）</span>custom_domains <span class="token operator">=</span> example.walterlv.com<span class="token punctuation">[</span>walterlv_example<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 配置 https 访问</span><span class="token function">type</span> <span class="token operator">=</span> https<span class="token comment" spellcheck="true"># 本地 Web 服务的端口（与前面的配置一样，都对应同一个 Web 服务）</span>local_port <span class="token operator">=</span> 10000<span class="token comment" spellcheck="true"># 需要反向代理的域名（当访客通过此域名访问 A 机器时，才会将请求反向代理到此 Web 服务）</span>custom_domains <span class="token operator">=</span> example.walterlv.com<span class="token comment" spellcheck="true"># 接下来的配置是支持 https 的重点配置</span><span class="token comment" spellcheck="true"># 配置插件，将 https 请求转换成 http 请求后再发送给本地 Web 服务程序</span>plugin <span class="token operator">=</span> https2http<span class="token comment" spellcheck="true"># 转换成 http 后，发送到本机的 10000 端口</span>plugin_local_addr <span class="token operator">=</span> 127.0.0.1:10000<span class="token comment" spellcheck="true"># 可能是 frp 的 Bug？这里必须写成 127.0.0.1，稍后解释</span>plugin_host_header_rewrite <span class="token operator">=</span> 127.0.0.1<span class="token comment" spellcheck="true"># 指定代理方式为 frp</span>plugin_header_X-From-Where <span class="token operator">=</span> frp<span class="token comment" spellcheck="true"># 指定成你在前面部分导出的证书的路径</span>plugin_crt_path <span class="token operator">=</span> C:/Samples/_.walterlv.com_chain.crtplugin_key_path <span class="token operator">=</span> C:/Samples/_.walterlv.com_key.key</code></pre><h2 id="测试穿透是否配置成功"><a href="#测试穿透是否配置成功" class="headerlink" title="测试穿透是否配置成功"></a>测试穿透是否配置成功</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> 用户名@服务端ip  -p 端口号<span class="token comment" spellcheck="true"># 这里一定要注意，这里用的是服务端的ip和用户名，端口号用的frpc.ini文件中的remote_port。如果你登录成功，那么，恭喜你，你已经学会了利用frc怎么配置内网穿透了！！！</span></code></pre><h3 id="frps-完整"><a href="#frps-完整" class="headerlink" title="frps 完整"></a>frps 完整</h3><pre class=" language-bash"><code class="language-bash">vim frps.ini 基础配置​bind_addr           服务端监听地址          0.0.0.0        bind_port           服务端监听端口           7000      bind_udp_port       服务端监听 UDP 端口        0       kcp_bind_port       服务端监听 KCP 协议端口     0        proxy_bind_addr     代理监听地址      log_file            日志文件地址             /var/log/frp.loglog_level           日志级别                trace, debug, info, warn, error<span class="token punctuation">(</span>默认info<span class="token punctuation">)</span>log_max_days        日志文件保留天数           3    detailed_errors_to_client  服务端返回详细错误信息给客户端  <span class="token boolean">true</span>tls_cert_file       TLS 服务端证书文件路径           tls_key_file        TLS 服务端密钥文件路径           tls_trusted_ca_file  TLS CA 证书路径    ​权限验证authentication_method       鉴权方式              token <span class="token punctuation">(</span>默认token 。oidc<span class="token punctuation">)</span>         authenticate_heartbeats     开启心跳消息鉴权       <span class="token boolean">false</span>        token                       鉴权使用的 token 值   客户端需要设置一样的值才能鉴权通过​管理配置allow_ports          允许代理绑定的服务端端口     1000-2000,2001,3000-4000max_pool_count       最大连接池大小             5max_ports_per_client 限制单个客户端最大同时存在的代理数  0<span class="token punctuation">(</span>0表示没有限制<span class="token punctuation">)</span>tls_only             只接受启用了 TLS 的客户端连接     <span class="token boolean">false</span>        ​监控dashboard_addr          启用 Dashboard 监听的本地地址    0.0.0.0         dashboard_port          启用 Dashboard 监听的本地端口    0       dashboard_user          HTTP BasicAuth 用户名          dashboard_pwd           HTTP BasicAuth 密码           enable_prometheus       是否提供 Prometheus 监控接口    <span class="token boolean">false</span>       需要同时启用了 Dashboard 才会生效asserts_dir             静态资源目录          Dashboard 使用的资源默认打包在二进制文件中，通过指定此参数使用自定义的静态资源​HTTP <span class="token operator">&amp;</span> HTTPSvhost_http_port         为 HTTP 类型代理监听的端口    0       启用后才支持 HTTP 类型的代理，默认不启用vhost_https_port        为 HTTPS 类型代理监听的端口   0       启用后才支持 HTTPS 类型的代理，默认不启用vhost_http_timeout      HTTP 类型代理在服务端的 ResponseHeader 超时时间  60      subdomain_host          二级域名后缀          custom_404_page         自定义 404 错误页面地址          ​TCPMUXtcpmux_httpconnect_port     为 TCPMUX 类型代理监听的端口  0       启用后才支持 TCPMUX 类型的代理，默认不启用</code></pre>]]></content>
      
      
      <categories>
          
          <category> 内网穿透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frp配置基础 </tag>
            
            <tag> frp使用 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
